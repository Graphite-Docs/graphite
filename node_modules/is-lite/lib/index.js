'use strict';

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

var getObjectType = function getObjectType(value) {
  return Object.prototype.toString.call(value).slice(8, -1);
};
var isObject = function isObject(value) {
  return _typeof(value) === 'object';
};
var index = {
  null: function _null(value) {
    return value === null;
  },
  undefined: function undefined(value) {
    return typeof value === 'undefined';
  },
  nullOrUndefined: function nullOrUndefined(value) {
    return this.null(value) || this.undefined(value);
  },
  string: function string(value) {
    return typeof value === 'string';
  },
  number: function number(value) {
    return typeof value === 'number';
  },
  function: function _function(value) {
    return typeof value === 'function';
  },
  boolean: function boolean(value) {
    return value === true || value === false;
  },
  array: Array.isArray,
  object: function object(value) {
    return !this.nullOrUndefined(value) && (this.function(value) || isObject(value));
  },
  plainObject: function plainObject(value) {
    var prototype;
    return getObjectType(value) === 'Object' && (prototype = Object.getPrototypeOf(value), prototype === null || prototype === Object.getPrototypeOf({}));
  },
  date: function date(value) {
    return getObjectType(value) === 'Date';
  },
  promise: function promise(value) {
    return getObjectType(value) === 'Promise';
  },
  iterable: function iterable(value) {
    return !this.nullOrUndefined(value) && this.function(value[Symbol.iterator]);
  },
  generator: function generator(value) {
    return this.iterable(value) && this.function(value.next) && this.function(value.throw);
  },
  regexp: function regexp(value) {
    return getObjectType(value) === 'RegExp';
  },
  symbol: function symbol(value) {
    return getObjectType(value) === 'Symbol';
  },
  domElement: function domElement(value) {
    var DOM_PROPERTIES_TO_CHECK = ['innerHTML', 'ownerDocument', 'style', 'attributes', 'nodeValue'];
    return this.object(value) && !this.plainObject(value) && value.nodeType === 1 && this.string(value.nodeName) && DOM_PROPERTIES_TO_CHECK.every(function (property) {
      return property in value;
    });
  }
};

module.exports = index;
