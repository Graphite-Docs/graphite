'use strict';

exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _array = require('handsontable/helpers/array');

var _mixed = require('handsontable/helpers/mixed');

var _base = require('./_base.js');

var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CHAR_CARRIAGE_RETURN = String.fromCharCode(13);
var CHAR_DOUBLE_QUOTES = String.fromCharCode(34);
var CHAR_LINE_FEED = String.fromCharCode(10);

/**
 * @plugin ExportFile
 * @private
 */

var Csv = function (_BaseType) {
  _inherits(Csv, _BaseType);

  function Csv() {
    _classCallCheck(this, Csv);

    return _possibleConstructorReturn(this, (Csv.__proto__ || Object.getPrototypeOf(Csv)).apply(this, arguments));
  }

  _createClass(Csv, [{
    key: 'export',


    /**
     * Create string body in desired format.
     *
     * @return {String}
    */
    value: function _export() {
      var _this2 = this;

      var options = this.options;
      var data = this.dataProvider.getData();
      var columnHeaders = this.dataProvider.getColumnHeaders();
      var hasColumnHeaders = columnHeaders.length > 0;
      var rowHeaders = this.dataProvider.getRowHeaders();
      var hasRowHeaders = rowHeaders.length > 0;

      // Starts with utf-8 BOM
      var result = '\uFEFF';

      if (hasColumnHeaders) {
        columnHeaders = (0, _array.arrayMap)(columnHeaders, function (value) {
          return _this2._escapeCell(value, true);
        });

        if (hasRowHeaders) {
          result += options.columnDelimiter;
        }
        result += columnHeaders.join(options.columnDelimiter);
        result += options.rowDelimiter;
      }

      (0, _array.arrayEach)(data, function (value, index) {
        if (index > 0) {
          result += options.rowDelimiter;
        }
        if (hasRowHeaders) {
          result += _this2._escapeCell(rowHeaders[index]) + options.columnDelimiter;
        }
        result += value.map(function (value) {
          return _this2._escapeCell(value);
        }).join(options.columnDelimiter);
      });

      return result;
    }

    /**
     * Escape cell value.
     *
     * @param {*} value Cell value.
     * @param {Boolean} [force=false] Indicates if cell value will be escaped forcefully.
     * @return {String}
     */

  }, {
    key: '_escapeCell',
    value: function _escapeCell(value) {
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      value = (0, _mixed.stringify)(value);

      if (value !== '' && (force || value.indexOf(CHAR_CARRIAGE_RETURN) >= 0 || value.indexOf(CHAR_DOUBLE_QUOTES) >= 0 || value.indexOf(CHAR_LINE_FEED) >= 0 || value.indexOf(this.options.columnDelimiter) >= 0)) {

        value = value.replace(new RegExp('"', 'g'), '""');
        value = '"' + value + '"';
      }

      return value;
    }
  }], [{
    key: 'DEFAULT_OPTIONS',

    /**
     * Default options for exporting CSV format.
     *
     * @returns {Object}
     */
    get: function get() {
      return {
        mimeType: 'text/csv',
        fileExtension: 'csv',
        columnDelimiter: ',',
        rowDelimiter: '\r\n'
      };
    }
  }]);

  return Csv;
}(_base2.default);

exports.default = Csv;