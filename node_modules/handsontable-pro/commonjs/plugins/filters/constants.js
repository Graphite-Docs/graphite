'use strict';

exports.__esModule = true;
exports.TYPES = exports.TYPE_DATE = exports.TYPE_TEXT = exports.TYPE_NUMERIC = exports.OPERATION_OR_THEN_VARIABLE = exports.OPERATION_OR = exports.OPERATION_AND = exports.CONDITION_FALSE = exports.CONDITION_TRUE = exports.CONDITION_BY_VALUE = exports.CONDITION_YESTERDAY = exports.CONDITION_TODAY = exports.CONDITION_TOMORROW = exports.CONDITION_DATE_AFTER = exports.CONDITION_DATE_BEFORE = exports.CONDITION_NOT_CONTAINS = exports.CONDITION_CONTAINS = exports.CONDITION_ENDS_WITH = exports.CONDITION_BEGINS_WITH = exports.CONDITION_NOT_BETWEEN = exports.CONDITION_BETWEEN = exports.CONDITION_LESS_THAN_OR_EQUAL = exports.CONDITION_LESS_THAN = exports.CONDITION_GREATER_THAN_OR_EQUAL = exports.CONDITION_GREATER_THAN = exports.CONDITION_NOT_EQUAL = exports.CONDITION_EQUAL = exports.CONDITION_NOT_EMPTY = exports.CONDITION_EMPTY = exports.CONDITION_NONE = undefined;

var _TYPES;

exports.default = getOptionsList;

var _object = require('handsontable/helpers/object');

var _array = require('handsontable/helpers/array');

var _predefinedItems = require('handsontable/plugins/contextMenu/predefinedItems');

var _conditionRegisterer = require('./conditionRegisterer');

var _none = require('./condition/none');

var _empty = require('./condition/empty');

var _notEmpty = require('./condition/notEmpty');

var _equal = require('./condition/equal');

var _notEqual = require('./condition/notEqual');

var _greaterThan = require('./condition/greaterThan');

var _greaterThanOrEqual = require('./condition/greaterThanOrEqual');

var _lessThan = require('./condition/lessThan');

var _lessThanOrEqual = require('./condition/lessThanOrEqual');

var _between = require('./condition/between');

var _notBetween = require('./condition/notBetween');

var _beginsWith = require('./condition/beginsWith');

var _endsWith = require('./condition/endsWith');

var _contains = require('./condition/contains');

var _notContains = require('./condition/notContains');

var _before = require('./condition/date/before');

var _after = require('./condition/date/after');

var _tomorrow = require('./condition/date/tomorrow');

var _today = require('./condition/date/today');

var _yesterday = require('./condition/date/yesterday');

var _byValue = require('./condition/byValue');

var _true = require('./condition/true');

var _false = require('./condition/false');

var _conjunction = require('./logicalOperations/conjunction');

var _disjunction = require('./logicalOperations/disjunction');

var _disjunctionAndVariable = require('./logicalOperations/disjunctionAndVariable');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.CONDITION_NONE = _none.CONDITION_NAME;
exports.CONDITION_EMPTY = _empty.CONDITION_NAME;
exports.CONDITION_NOT_EMPTY = _notEmpty.CONDITION_NAME;
exports.CONDITION_EQUAL = _equal.CONDITION_NAME;
exports.CONDITION_NOT_EQUAL = _notEqual.CONDITION_NAME;
exports.CONDITION_GREATER_THAN = _greaterThan.CONDITION_NAME;
exports.CONDITION_GREATER_THAN_OR_EQUAL = _greaterThanOrEqual.CONDITION_NAME;
exports.CONDITION_LESS_THAN = _lessThan.CONDITION_NAME;
exports.CONDITION_LESS_THAN_OR_EQUAL = _lessThanOrEqual.CONDITION_NAME;
exports.CONDITION_BETWEEN = _between.CONDITION_NAME;
exports.CONDITION_NOT_BETWEEN = _notBetween.CONDITION_NAME;
exports.CONDITION_BEGINS_WITH = _beginsWith.CONDITION_NAME;
exports.CONDITION_ENDS_WITH = _endsWith.CONDITION_NAME;
exports.CONDITION_CONTAINS = _contains.CONDITION_NAME;
exports.CONDITION_NOT_CONTAINS = _notContains.CONDITION_NAME;
exports.CONDITION_DATE_BEFORE = _before.CONDITION_NAME;
exports.CONDITION_DATE_AFTER = _after.CONDITION_NAME;
exports.CONDITION_TOMORROW = _tomorrow.CONDITION_NAME;
exports.CONDITION_TODAY = _today.CONDITION_NAME;
exports.CONDITION_YESTERDAY = _yesterday.CONDITION_NAME;
exports.CONDITION_BY_VALUE = _byValue.CONDITION_NAME;
exports.CONDITION_TRUE = _true.CONDITION_NAME;
exports.CONDITION_FALSE = _false.CONDITION_NAME;
exports.OPERATION_AND = _conjunction.OPERATION_ID;
exports.OPERATION_OR = _disjunction.OPERATION_ID;
exports.OPERATION_OR_THEN_VARIABLE = _disjunctionAndVariable.OPERATION_ID;
var TYPE_NUMERIC = exports.TYPE_NUMERIC = 'numeric';
var TYPE_TEXT = exports.TYPE_TEXT = 'text';
var TYPE_DATE = exports.TYPE_DATE = 'date';
/**
 * Default types and order for filter conditions.
 *
 * @type {Object}
 */
var TYPES = exports.TYPES = (_TYPES = {}, _defineProperty(_TYPES, TYPE_NUMERIC, [_none.CONDITION_NAME, _predefinedItems.SEPARATOR, _empty.CONDITION_NAME, _notEmpty.CONDITION_NAME, _predefinedItems.SEPARATOR, _equal.CONDITION_NAME, _notEqual.CONDITION_NAME, _predefinedItems.SEPARATOR, _greaterThan.CONDITION_NAME, _greaterThanOrEqual.CONDITION_NAME, _lessThan.CONDITION_NAME, _lessThanOrEqual.CONDITION_NAME, _between.CONDITION_NAME, _notBetween.CONDITION_NAME]), _defineProperty(_TYPES, TYPE_TEXT, [_none.CONDITION_NAME, _predefinedItems.SEPARATOR, _empty.CONDITION_NAME, _notEmpty.CONDITION_NAME, _predefinedItems.SEPARATOR, _equal.CONDITION_NAME, _notEqual.CONDITION_NAME, _predefinedItems.SEPARATOR, _beginsWith.CONDITION_NAME, _endsWith.CONDITION_NAME, _predefinedItems.SEPARATOR, _contains.CONDITION_NAME, _notContains.CONDITION_NAME]), _defineProperty(_TYPES, TYPE_DATE, [_none.CONDITION_NAME, _predefinedItems.SEPARATOR, _empty.CONDITION_NAME, _notEmpty.CONDITION_NAME, _predefinedItems.SEPARATOR, _equal.CONDITION_NAME, _notEqual.CONDITION_NAME, _predefinedItems.SEPARATOR, _before.CONDITION_NAME, _after.CONDITION_NAME, _between.CONDITION_NAME, _predefinedItems.SEPARATOR, _tomorrow.CONDITION_NAME, _today.CONDITION_NAME, _yesterday.CONDITION_NAME]), _TYPES);

/**
 * Get options list for conditional filter by data type (e.q: `'text'`, `'numeric'`, `'date'`).
 *
 * @returns {Object}
 */
function getOptionsList(type) {
  var items = [];

  if (!TYPES[type]) {
    type = TYPE_TEXT;
  }
  (0, _array.arrayEach)(TYPES[type], function (type) {
    var option = void 0;

    if (type === _predefinedItems.SEPARATOR) {
      option = { name: _predefinedItems.SEPARATOR };
    } else {
      option = (0, _object.clone)((0, _conditionRegisterer.getConditionDescriptor)(type));
    }
    items.push(option);
  });

  return items;
}