'use strict';

exports.__esModule = true;
exports.OPERATION_NAME = undefined;
exports.prepare = prepare;
exports.operate = operate;

var _array = require('handsontable/helpers/array');

var _utils = require('./../utils');

var _value = require('./../cell/value');

var _value2 = _interopRequireDefault(_value);

var _expressionModifier = require('./../expressionModifier');

var _expressionModifier2 = _interopRequireDefault(_expressionModifier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * When "column_sorting" is triggered the following operations must be performed:
 *
 * - All formulas which contain cell coordinates must be updated and saved into source data - Column must be changed
 *   (decreased or increased) depends on new target position - previous position.
 * - Mark all formulas which need update with "STATE_OUT_OFF_DATE" flag, so they can be recalculated after the operation.
 */
var OPERATION_NAME = exports.OPERATION_NAME = 'column_sorting';

var visualRows = void 0;

/**
 * Collect all previous visual rows from CellValues.
 */
function prepare() {
  var matrix = this.matrix,
      dataProvider = this.dataProvider;


  visualRows = new WeakMap();

  (0, _array.arrayEach)(matrix.data, function (cell) {
    visualRows.set(cell, dataProvider.t.toVisualRow(cell.row));
  });
}

/**
 * Translate all CellValues depends on previous position.
 */
function operate() {
  var matrix = this.matrix,
      dataProvider = this.dataProvider;


  matrix.cellReferences.length = 0;

  (0, _array.arrayEach)(matrix.data, function (cell) {
    cell.setState(_value2.default.STATE_OUT_OFF_DATE);
    cell.clearPrecedents();

    var row = cell.row,
        column = cell.column;

    var value = dataProvider.getSourceDataAtCell(row, column);

    if ((0, _utils.isFormulaExpression)(value)) {
      var prevRow = visualRows.get(cell);
      var expModifier = new _expressionModifier2.default(value);

      expModifier.translate({ row: dataProvider.t.toVisualRow(row) - prevRow });

      dataProvider.updateSourceData(row, column, expModifier.toString());
    }
  });

  visualRows = null;
}