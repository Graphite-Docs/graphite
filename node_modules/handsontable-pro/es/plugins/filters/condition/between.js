var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

import * as C from 'handsontable/i18n/constants';
import { registerCondition, getCondition } from './../conditionRegisterer';
import { CONDITION_NAME as CONDITION_DATE_AFTER } from './date/after';
import { CONDITION_NAME as CONDITION_DATE_BEFORE } from './date/before';

export var CONDITION_NAME = 'between';

export function condition(dataRow) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : inputValues,
      _ref2 = _slicedToArray(_ref, 2),
      from = _ref2[0],
      to = _ref2[1];

  if (dataRow.meta.type === 'numeric') {
    var _from = parseFloat(from, 10);
    var _to = parseFloat(to, 10);

    from = Math.min(_from, _to);
    to = Math.max(_from, _to);
  } else if (dataRow.meta.type === 'date') {
    var dateBefore = getCondition(CONDITION_DATE_BEFORE, [to]);
    var dateAfter = getCondition(CONDITION_DATE_AFTER, [from]);

    return dateBefore(dataRow) && dateAfter(dataRow);
  }

  return dataRow.value >= from && dataRow.value <= to;
}

registerCondition(CONDITION_NAME, condition, {
  name: C.FILTERS_CONDITIONS_BETWEEN,
  inputsCount: 2,
  showOperators: true
});